#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define TAM_MAX_STRING 17
#define TAM_ID 60
#define BUFFER_DATA 20
#define BUFFER_HORA 20

typedef struct {
    long timestamp;
    char valor[TAM_MAX_STRING];
} Leitura;

int buscarMaisProxima(Leitura *leituras, int tamanho, long alvo) {
    int inicio = 0, fim = tamanho - 1, meio;
    int maisProximo = 0;
    long menorDiferenca = labs(leituras[0].timestamp - alvo);

    while (inicio <= fim) {
        meio = (inicio + fim) / 2;
        long dif = labs(leituras[meio].timestamp - alvo);

        if (dif < menorDiferenca) {
            menorDiferenca = dif;
            maisProximo = meio;
        }

        if (leituras[meio].timestamp < alvo) {
            inicio = meio + 1;
        } else if (leituras[meio].timestamp > alvo) {
            fim = meio - 1;
        } else {
            return meio;
        }
    }
    return maisProximo;
}

int main() {
    char sensor[TAM_ID];
    char data[BUFFER_DATA];
    char hora[BUFFER_HORA];
    char tipo[20];
    int dia, mes, ano;
    int h, m, s;
    struct tm t = {0};
    long alvo;
    char nomeArquivo[100];
    FILE *arquivo = NULL;

    while (1) {
        printf("Escolha o tipo de dado (CONJ_Z, CONJ_Q, TEXTO, BINARIO): ");
        fgets(tipo, sizeof(tipo), stdin);
        tipo[strcspn(tipo, "\n")] = '\0';

        for (int i = 0; tipo[i]; i++) tipo[i] = toupper(tipo[i]);

        if (strcmp(tipo, "CONJ_Z") == 0 || strcmp(tipo, "CONJ_Q") == 0 ||
            strcmp(tipo, "TEXTO") == 0 || strcmp(tipo, "BINARIO") == 0) {
            break;
        } else {
            printf("Tipo inválido. Tente novamente.\n");
        }
    }

    while (1) {
        printf("Digite o nome do sensor (sem extensao, ex: jacu_tipo): ");
        fgets(sensor, sizeof(sensor), stdin);
        sensor[strcspn(sensor, "\n")] = '\0';

        snprintf(nomeArquivo, sizeof(nomeArquivo), "%s.txt", sensor);
        arquivo = fopen(nomeArquivo, "r");

        if (!arquivo) {
            printf("Erro ao abrir o arquivo '%s'. Verifique se o sensor existe e tente novamente.\n", nomeArquivo);
        } else {
            break;
        }
    }

    while (1) {
        printf("Digite a data da consulta (dd/mm/aaaa): ");
        fgets(data, sizeof(data), stdin);
        data[strcspn(data, "\n")] = '\0';

        if (strlen(data) != 10 || data[2] != '/' || data[5] != '/') {
            printf("Formato inválido. Use dd/mm/aaaa.\n");
            continue;
        }

        if (sscanf(data, "%d/%d/%d", &dia, &mes, &ano) != 3 ||
            dia < 1 || dia > 31 || mes < 1 || mes > 12 || ano < 1970) {
            printf("Data inválida.\n");
            continue;
        }
        break;
    }

    while (1) {
        printf("Digite a hora da consulta (hh:mm:ss): ");
        fgets(hora, sizeof(hora), stdin);
        hora[strcspn(hora, "\n")] = '\0';

        if (strlen(hora) != 8 || hora[2] != ':' || hora[5] != ':') {
            printf("Formato inválido. Use hh:mm:ss.\n");
            continue;
        }

        if (sscanf(hora, "%d:%d:%d", &h, &m, &s) != 3 ||
            h < 0 || h > 23 || m < 0 || m > 59 || s < 0 || s > 59) {
            printf("Hora inválida.\n");
            continue;
        }
        break;
    }

    t.tm_year = ano - 1900;
    t.tm_mon = mes - 1;
    t.tm_mday = dia;
    t.tm_hour = h;
    t.tm_min = m;
    t.tm_sec = s;
    t.tm_isdst = -1;

    alvo = mktime(&t);
    if (alvo == -1) {
        printf("Erro ao converter para timestamp.\n");
        fclose(arquivo);
        return 1;
    }

    Leitura *leituras = NULL;
    int capacidade = 0, quantidade = 0;
    char linha[100];
    int linhaNumero = 1;

    while (fgets(linha, sizeof(linha), arquivo)) {
        long ts;
        char valor[TAM_MAX_STRING];
        char sensorIgnorado[TAM_ID];

        if (sscanf(linha, "%ld %59s %16s", &ts, sensorIgnorado, valor) != 3) {
            printf("Linha inválida na leitura (linha %d): %s", linhaNumero, linha);
            linhaNumero++;
            continue;
        }

        if (quantidade == capacidade) {
            capacidade = (capacidade == 0) ? 100 : capacidade * 2;
            leituras = realloc(leituras, capacidade * sizeof(Leitura));
            if (!leituras) {
                printf("Erro de memória.\n");
                fclose(arquivo);
                return 1;
            }
        }

        leituras[quantidade].timestamp = ts;
        strncpy(leituras[quantidade].valor, valor, TAM_MAX_STRING - 1);
        leituras[quantidade].valor[TAM_MAX_STRING - 1] = '\0';
        quantidade++;
        linhaNumero++;
    }

    fclose(arquivo);

    if (quantidade == 0) {
        printf("Nenhuma leitura disponível.\n");
        free(leituras);
        return 1;
    }

    int indice = buscarMaisProxima(leituras, quantidade, alvo);
    printf("\nLeitura mais próxima encontrada:\nTimestamp: %ld\n", leituras[indice].timestamp);

    if (strcmp(tipo, "CONJ_Z") == 0) {
        int valor;
        sscanf(leituras[indice].valor, "%d", &valor);
        printf("Tipo: inteiro\nValor: %d\n", valor);
    } else if (strcmp(tipo, "CONJ_Q") == 0) {
        float valor;
        sscanf(leituras[indice].valor, "%f", &valor);
        printf("Tipo: float\nValor: %.2f\n", valor);
    } else if (strcmp(tipo, "BINARIO") == 0) {
        printf("Tipo: booleano\nValor: %s\n", leituras[indice].valor);
    } else if (strcmp(tipo, "TEXTO") == 0) {
        printf("Tipo: texto\nValor: %s\n", leituras[indice].valor);
    }

    free(leituras);
    return 0;
}
